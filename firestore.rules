rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /homework/{taskId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && request.resource.data.keys().hasAll(['title', 'subject', 'dueDate', 'priority', 'status', 'notes', 'createdAt'])
          && request.resource.data.dueDate is string
          && request.resource.data.priority in ['low', 'medium', 'high']
          && request.resource.data.status in ['pending', 'completed'];
        allow update: if request.auth != null 
          && request.auth.uid == userId
          && request.resource.data.keys().hasAll(['title', 'subject', 'dueDate', 'priority', 'status', 'notes'])
          && request.resource.data.dueDate is string
          && request.resource.data.priority in ['low', 'medium', 'high']
          && request.resource.data.status in ['pending', 'completed'];
        allow delete: if request.auth != null && request.auth.uid == userId;
      }

      // Add new rules for tests collection
      match /tests/{testId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && request.resource.data.keys().hasAll(['subject', 'topic', 'testDate', 'difficulty', 'studyNotes', 'createdAt'])
          && request.resource.data.testDate is string
          && request.resource.data.difficulty in ['easy', 'medium', 'hard'];
        allow update: if request.auth != null 
          && request.auth.uid == userId
          && request.resource.data.keys().hasAll(['subject', 'topic', 'testDate', 'difficulty', 'studyNotes'])
          && request.resource.data.testDate is string
          && request.resource.data.difficulty in ['easy', 'medium', 'hard'];
        allow delete: if request.auth != null && request.auth.uid == userId;
      }

      match /plannedVisits/{visitId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && request.resource.data.keys().hasAll(['college', 'date', 'interests', 'createdAt']);
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      match /gpaHistory/{gpaId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && request.resource.data.keys().hasAll(['gpa', 'courses', 'timestamp', 'date']);
        allow delete: if request.auth != null && request.auth.uid == userId;
      }

      match /studyScheduleHistory/{scheduleId} {
        allow read: if request.auth != null && request.auth.uid == userId; // Ensure user can read their own data
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && request.resource.data.keys().hasAll(['tasks', 'timestamp', 'date'])
          && request.resource.data.tasks is list
          && request.resource.data.tasks.size() > 0
          && request.resource.data.tasks[0].keys().hasAll(['name', 'time']);
        allow delete: if request.auth != null && request.auth.uid == userId; // Ensure user can delete their own data
        allow update: if request.auth != null && request.auth.uid == userId; // Ensure user can update their own data
      }

      match /notes/{noteId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /subjects/{subjectId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && request.resource.data.keys().hasAll(['name', 'currentGrade', 'targetGrade', 'notes', 'progress'])
          && request.resource.data.name is string
          && request.resource.data.currentGrade is number
          && request.resource.data.targetGrade is number;
        allow update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
}
